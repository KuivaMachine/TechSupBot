package org.example.techsupbot;

import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.example.techsupbot.DTO.Client;
import org.example.techsupbot.DTO.ClientService;
import org.springframework.stereotype.Controller;
import org.telegram.telegrambots.meta.api.methods.send.SendMediaGroup;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaPhoto;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

@Controller
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class MessageHandler {
    //git add . git commit -m "new" git push -u origin main
    private final Long managerChatId = 889218535L;
    private TechSupBot telegram;
    final ClientService clientService;

    public void registerBot(TechSupBot telegram) {
        this.telegram = telegram;
    }

    public SendMessage processMessage(Long chatId, Message update) {
        String text = update.getText();
        Client currentclient = clientService.findByChatId(chatId);
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        if (text.equals("/start")) {
            return sendWelcomeMessage(chatId);
        }
        if (text.equals("/delete_me")) {
            clientService.deleteClientByChatId(chatId);
            message.setText("–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω");
            message.setReplyMarkup(new ReplyKeyboardRemove(true));
            return message;
        }
        if (text.equals(ButtonLabels.ATTACH_IMAGE.getLabel())) {
            return addImageProcess(currentclient, message);
        }
        if (text.equals(ButtonLabels.ATTACH_SCREEN.getLabel())) {
            return addsScreenProcess(currentclient, message);
        }
        if (text.equals(ButtonLabels.ATTACH_DESCRIPTION.getLabel())) {
            return addDescriptionProcess(currentclient, message);
        }
        if (currentclient.getStatus().equals(ClientStatus.WAITING_DESCRIPTION)) {
            currentclient.setDescription(text);
            clientService.saveClient(currentclient);
            return fillReturnDataProcess(currentclient, message);
        }
        if (currentclient.getStatus().equals(ClientStatus.ORDER_QUESTION)) {
            return sendOrderQuestionProcess(update, message);
        }
        if (currentclient.getStatus().equals(ClientStatus.WAITING_IMAGE)) {
            message.setText("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ üëá\n–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ\", –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.");
            return message;
        }
        if (currentclient.getStatus().equals(ClientStatus.WAITING_SCREEN)) {
            message.setText("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ üëá\n–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω\", –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.");
            return message;
        }
        if (currentclient.getStatus().equals(ClientStatus.WRONG_ITEM)) {
            message.setText("–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ üëá\n–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)");
            return message;
        }
        if (text.equals(ButtonLabels.SEND.getLabel()) && currentclient.getStatus().equals(ClientStatus.WAITING_SEND)) {
            return sendDataToManager(currentclient, message);
        }
        if (text.equals(ButtonLabels.MAIN_MENU.getLabel())) {
            return sendWelcomeMessage(chatId);
        } else {
            //TODO: –°–î–ï–õ–ê–¢–¨ –õ–û–ì–ò–ö–£ –û–¢–í–ï–¢–ê –ù–ê –ü–†–û–°–¢–û–ô –í–í–û–î –¢–ï–ö–°–¢–ê
            message.setChatId(chatId);
            message.setText(chatId.toString());
        }
        return message;
    }

    private SendMessage sendOrderQuestionProcess(Message update, SendMessage message) {
        SendMessage order = new SendMessage();
        String question = String.format("–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @%s:\n", update.getFrom().getUserName());
        order.setChatId(managerChatId);
        order.setText(question+update.getText());
        try {
            telegram.execute(order);
            message.setText("–°–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.");
            message.setReplyMarkup(createReplyKeyboard(List.of(new KeyboardRow(List.of(new KeyboardButton(ButtonLabels.MAIN_MENU.getLabel()))))));
            return message;
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    public SendMessage processCallback(Long chatId, String data) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        Client currentclient = clientService.findByChatId(chatId);
        return switch (data) {
            case "service_support" -> sendServiceSupportMessage(chatId, message);
            case "wrong_item" -> sendWrongItemInstructions(currentclient, message);
            case "damaged_item" -> sendDamagedItemInstructions(currentclient, message);
            case "order_questions" -> sendOrderQuestionsMessage(currentclient, message);
            case "create_case" -> sendCreateCaseMessage(chatId, message);
            case "join_group" -> sendJoinGroupMessage(chatId, message);
            case "promotions" -> sendPromotionsMessage(chatId, message);
            case "help_choice" -> sendHelpChoiceMessage(chatId, message);
            default -> {
                message.setText(data);
                yield message;
            }
        };
    }

    public SendMessage processPhoto(Long chatId, List<PhotoSize> photos) {
        Client currentclient = clientService.findByChatId(chatId);
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("""
                –í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ, –Ω–æ –∑–∞–±—ã–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ" –∏–ª–∏ "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω"
                """);
        PhotoSize photo = photos.stream().max(Comparator.comparing((x) -> x.getFileSize()
        )).orElse(null);
        if (photo != null) {
            if (currentclient.getStatus().equals(ClientStatus.WAITING_IMAGE)) {
                currentclient.setImage(photo.getFileId());
                currentclient.setStatus(ClientStatus.WRONG_ITEM);
                clientService.saveClient(currentclient);
                return fillReturnDataProcess(currentclient, message);
            }
            if (currentclient.getStatus().equals(ClientStatus.WAITING_SCREEN)) {
                currentclient.setScreenshot(photo.getFileId());
                currentclient.setStatus(ClientStatus.WRONG_ITEM);
                clientService.saveClient(currentclient);
                return fillReturnDataProcess(currentclient, message);
            }
        }
        return message;
    }

    private SendMessage fillReturnDataProcess(Client currentclient, SendMessage message) {
        ArrayList<KeyboardRow> keyboard = new ArrayList<>();
        String text = "–û—Ç–ª–∏—á–Ω–æ! –í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å:\n";
        if (currentclient.getScreenshot() == null) {
            text += "- –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –∑–∞–∫–∞–∑–æ–º\n";
            keyboard.add(new KeyboardRow(List.of(new KeyboardButton(ButtonLabels.ATTACH_SCREEN.getLabel()))));
        }
        if (currentclient.getImage() == null) {
            text += "- –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n";
            keyboard.add(new KeyboardRow(List.of(new KeyboardButton(ButtonLabels.ATTACH_IMAGE.getLabel()))));
        }
        if (currentclient.getDescription() == null) {
            text += "- –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n";
            keyboard.add(new KeyboardRow(List.of(new KeyboardButton(ButtonLabels.ATTACH_DESCRIPTION.getLabel()))));
        }
        if (currentclient.getDescription() != null && currentclient.getImage() != null && currentclient.getScreenshot() != null) {
            message.setText("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É –Ω–∞—Å, –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—É\"");
            currentclient.setStatus(ClientStatus.WAITING_SEND);
            clientService.saveClient(currentclient);
            message.setReplyMarkup(createReplyKeyboard(List.of(new KeyboardRow(List.of(new KeyboardButton(ButtonLabels.SEND.getLabel()))))));
            return message;
        }
        message.setText(text);
        message.setReplyMarkup(createReplyKeyboard(keyboard));
        return message;
    }


    private SendMessage addDescriptionProcess(Client currentclient, SendMessage message) {
        currentclient.setStatus(ClientStatus.WAITING_DESCRIPTION);
        clientService.saveClient(currentclient);
        message.setText("""
                –û–ø–∏—à–∏—Ç–µ, –≤ —á–µ–º –∏–º–µ–Ω–Ω–æ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞:
                """);
        return message;
    }

    private SendMessage addsScreenProcess(Client currentclient, SendMessage message) {
        currentclient.setStatus(ClientStatus.WAITING_SCREEN);
        clientService.saveClient(currentclient);
        message.setText("""
                –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º:
                """);
        return message;
    }

    private SendMessage sendDataToManager(Client currentclient, SendMessage message) {
        SendMediaGroup media = new SendMediaGroup();
        InputMediaPhoto image = new InputMediaPhoto();
        image.setMedia(currentclient.getImage());
        InputMediaPhoto screen = new InputMediaPhoto();
        screen.setMedia(currentclient.getScreenshot());
        screen.setCaption(currentclient.getDescription());
        media.setMedias(List.of(image, screen));
        media.setChatId(managerChatId);
        try {
            telegram.execute(media);
            message.setText("–ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.");
            currentclient.setStatus(ClientStatus.SENT);
            clientService.saveClient(currentclient);
            message.setReplyMarkup(createReplyKeyboard(List.of(new KeyboardRow(List.of(new KeyboardButton(ButtonLabels.MAIN_MENU.getLabel()))))));
            return message;
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private SendMessage addImageProcess(Client currentclient, SendMessage message) {
        currentclient.setStatus(ClientStatus.WAITING_IMAGE);
        clientService.saveClient(currentclient);
        message.setText("""
                –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:
                """);
        return message;
    }


    private SendMessage sendWelcomeMessage(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("""
                üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MustHaveCase!
                –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Ç–∏–ª—å–Ω—ã–µ, –Ω–∞–¥–µ–∂–Ω—ã–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ö–ª—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ê –µ—â–µ –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∏–ª–∏ —Ä–µ—à–∏—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å. \s
                                
                –ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?
                - üõ†Ô∏è –ü–æ–º–æ—á—å —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
                - üé® –ü–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–µ—Ö–æ–ª.
                - üí¨ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É, –≥–¥–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∞–∫—Ü–∏–∏, –Ω–æ–≤–∏–Ω–∫–∏ –∏ –æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
                - üõí –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ü–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö.
                                
                –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º! üòä""");
        message.setReplyMarkup(createInlineKeyboard(
                List.of(
                        new Pair<>("üõ†Ô∏è –°–µ—Ä–≤–∏—Å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "service_support"),
                        new Pair<>("üé® –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–µ—Ö–æ–ª", "create_case"),
                        new Pair<>("üí¨ –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", "join_group"),
                        new Pair<>("üõí –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏", "promotions"),
                        new Pair<>("‚ùì –ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ", "help_choice")
                )
        ));
        return message;
    }

    private SendMessage sendServiceSupportMessage(Long chatId, SendMessage message) {
        message.setChatId(chatId.toString());
        message.setText("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!");
        message.setReplyMarkup(createInlineKeyboard(
                List.of(
                        new Pair<>("–Ø –ø–æ–ª—É—á–∏–ª –Ω–µ —Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–ª–∏ –¥–∏–∑–∞–π–Ω", "wrong_item"),
                        new Pair<>("–¢–æ–≤–∞—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –±—Ä–∞–∫–æ–≤–∞–Ω", "damaged_item"),
                        new Pair<>("–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É", "order_questions")
                )
        ));
        return message;
    }

    private SendMessage sendWrongItemInstructions(Client currentClient, SendMessage message) {
        if (currentClient.getStatus() == ClientStatus.SENT) {
            message.setText("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏.");
        } else {
            currentClient.setStatus(ClientStatus.WRONG_ITEM);
            clientService.saveClient(currentClient);
            message.setText("""
                    –ú—ã –æ—á–µ–Ω—å —Å–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ —Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–ª–∏ –¥–∏–∑–∞–π–Ω. –î–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
                    1. üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–º (—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏).
                    2. üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º.
                    3. üì¶ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É –∏ —Ç–æ–≤–∞—Ä –≤ —Ç–æ–º –≤–∏–¥–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏.
                    –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –º—ã –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–º–µ–Ω—ã –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ üëá
                    """);
            message.setReplyMarkup(createReplyKeyboard(List.of(new KeyboardRow(List.of(
                            new KeyboardButton(ButtonLabels.ATTACH_IMAGE.getLabel()))),
                    new KeyboardRow(List.of(new KeyboardButton(ButtonLabels.ATTACH_SCREEN.getLabel()))),
                    new KeyboardRow(List.of(new KeyboardButton(ButtonLabels.ATTACH_DESCRIPTION.getLabel())))
            )));
        }
        return message;
    }

    private SendMessage sendDamagedItemInstructions(Client currentClient, SendMessage message) {
        if (currentClient.getStatus() == ClientStatus.SENT) {
            message.setText("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏.");
        } else {
            currentClient.setStatus(ClientStatus.WRONG_ITEM);
            clientService.saveClient(currentClient);
            message.setText("""
                    –ú—ã –æ—á–µ–Ω—å —Å–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä. –î–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
                    1. üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–º (—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏.
                    2. üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞, —á—Ç–æ –± –±—ã–ª–æ –≤–∏–¥–Ω–æ –∑–∞–∫–∞–∑.
                    3. üì¶ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É –∏ —Ç–æ–≤–∞—Ä –≤ —Ç–æ–º –≤–∏–¥–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏.
                    –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –º—ã –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–º–µ–Ω—ã –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ üëá
                    """);
            message.setReplyMarkup(createReplyKeyboard(List.of(new KeyboardRow(List.of(
                            new KeyboardButton(ButtonLabels.ATTACH_IMAGE.getLabel()))),
                    new KeyboardRow(List.of(new KeyboardButton(ButtonLabels.ATTACH_SCREEN.getLabel()))),
                    new KeyboardRow(List.of(new KeyboardButton(ButtonLabels.ATTACH_DESCRIPTION.getLabel())))
            )));
        }
        return message;
    }

    private SendMessage sendOrderQuestionsMessage(Client currentClient, SendMessage message) {
        message.setText("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:");
        currentClient.setStatus(ClientStatus.ORDER_QUESTION);
        clientService.saveClient(currentClient);
        return message;
    }

    private SendMessage sendCreateCaseMessage(Long chatId, SendMessage message) {
        message.setChatId(chatId.toString());
        message.setText("""
                –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –≤—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç, –≥–¥–µ —Å–º–æ–∂–µ—Ç–µ:
                - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
                - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π –¥–∏–∑–∞–π–Ω –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
                - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø—ã.
                - –£–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
                –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ!
                üëá –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:
                [–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–µ—Ö–æ–ª](https://musthavecase.ru/product/cases/konstruktor-chehla)
                                
                P.S. –°–æ–∑–¥–∞—Ç—å –º–æ–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–µ—Ö–æ–ª, –∞ –µ—â–µ –∏ –æ–±–ª–æ–∂–∫—É –Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç, —Ñ—É—Ç–±–æ–ª–∫—É, power bank –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ)
                –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üòä
                """);
        message.setParseMode("Markdown");
        return message;
    }

    private SendMessage sendJoinGroupMessage(Long chatId, SendMessage message) {

        message.setChatId(chatId.toString());
        message.setText("""
                üéâ –û—Ç–ª–∏—á–Ω–æ! üéâ
                –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
                                
                üëâ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://t.me/MustHaveCase –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è".
                                
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –¥—Ä—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É! üöÄ
                """);
        message.setParseMode("Markdown");

        return message;
    }

    private SendMessage sendPromotionsMessage(Long chatId, SendMessage message) {
        //TODO: –°–î–ï–õ–ê–¢–¨ –õ–û–ì–ò–ö–£ –û–¢–í–ï–¢–ê –ù–ê –ö–ù–û–ü–ö–£ "–ê–ö–¶–ò–ò –ò –°–ö–ò–î–ö–ò"

        message.setChatId(chatId);
        message.setText("–°–î–ï–õ–ê–¢–¨ –õ–û–ì–ò–ö–£ –û–¢–í–ï–¢–ê –ù–ê –ö–ù–û–ü–ö–£ \"–ê–ö–¶–ò–ò –ò –°–ö–ò–î–ö–ò\"");
        return message;
    }

    private SendMessage sendHelpChoiceMessage(Long chatId, SendMessage message) {
        //TODO: –°–î–ï–õ–ê–¢–¨ –õ–û–ì–ò–ö–£ –û–¢–í–ï–¢–ê –ù–ê –ö–ù–û–ü–ö–£ "–ü–û–ú–û–©–¨ –í –í–´–ë–û–†–ï"

        message.setChatId(chatId);
        message.setText("–°–î–ï–õ–ê–¢–¨ –õ–û–ì–ò–ö–£ –û–¢–í–ï–¢–ê –ù–ê –ö–ù–û–ü–ö–£ \"–ü–û–ú–û–©–¨ –í –í–´–ë–û–†–ï\"");
        return message;
    }

    private static ReplyKeyboardMarkup createReplyKeyboard(List<KeyboardRow> list) {
        ArrayList<KeyboardRow> keyboard = new ArrayList<>(list);
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setSelective(true);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);
        return replyKeyboardMarkup;
    }

    private InlineKeyboardMarkup createInlineKeyboard(List<Pair<String, String>> buttons) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Pair<String, String> button : buttons) {
            InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
            inlineKeyboardButton.setText(button.getFirst());
            inlineKeyboardButton.setCallbackData(button.getSecond());
            keyboard.add(List.of(inlineKeyboardButton));
        }

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }


}
