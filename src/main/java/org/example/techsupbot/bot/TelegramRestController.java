package org.example.techsupbot.bot;

import jakarta.annotation.PostConstruct;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.log4j.Log4j2;
import org.example.techsupbot.DTO.Client;
import org.example.techsupbot.DTO.ClientService;
import org.example.techsupbot.data.ButtonLabels;
import org.example.techsupbot.data.ClientStatus;
import org.example.techsupbot.redis.RedisService;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMediaGroup;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;

@Log4j2
@RestController
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class TelegramRestController {

    final MessageHandler handler;
    final ClientService clientService;
    final RedisService redisService;
    private TechSupBot telegramBot;

    @PostConstruct
    public void init() {
        handler.initController(this);
    }

    @PostMapping("/callback/bot_tech_sup/update")
    public BotApiMethod<?> receiveUpdate(@RequestBody Update update) {
        Message lastMessage;

        if (update.hasMessage() && update.getMessage().hasText()) {
            //–ï–°–õ–ò –ù–ê–ñ–ê–õ –ö–ù–û–ü–ö–£ "–í–ï–†–ù–£–¢–¨–°–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
            if (update.getMessage().getText().equals("/start") || update.getMessage().getText().equals(ButtonLabels.MAIN_MENU.getLabel())) {
                Client currentClient = clientService.findByChatId(update.getMessage().getChatId());
                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(update.getMessage().getChatId());
                lastMessage = executeMessage(sendWelcomeMessage(currentClient, sendMessage));
            } else {
                lastMessage = executeMessage(handler.processMessage(update.getMessage().getChatId(), update.getMessage()));
            }
            if(lastMessage!=null){
                redisService.saveLastMessageInfo(lastMessage.getChatId(), lastMessage.getMessageId());
            }

        } else if (update.hasMessage() && update.getMessage().hasPhoto()) {
            lastMessage = executeMessage(handler.processPhoto(update.getMessage().getChatId(), update.getMessage().getPhoto()));
            if(lastMessage!=null){
                redisService.saveLastMessageInfo(lastMessage.getChatId(), lastMessage.getMessageId());
            }
        } else if (update.hasCallbackQuery()) {
            if (update.getCallbackQuery().getData().equals("main_menu")) {
                Client currentClient = clientService.findByChatId(update.getCallbackQuery().getMessage().getChatId());
                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(update.getCallbackQuery().getMessage().getChatId());
                lastMessage = executeMessage(sendWelcomeMessage(currentClient, sendMessage));
            }else{
                lastMessage= executeMessage(handler.processCallback(update, update.getCallbackQuery().getData()));
            }
            if(lastMessage!=null){
                redisService.saveLastMessageInfo(lastMessage.getChatId(), lastMessage.getMessageId());
            }
        }
        return null;
    }



    private SendMessage sendWelcomeMessage(Client currentClient, SendMessage message) {
        deleteLastMessage(currentClient.getChatId());
        message.setText("""
                üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MustHaveCase!
                –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Ç–∏–ª—å–Ω—ã–µ, –Ω–∞–¥–µ–∂–Ω—ã–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ö–ª—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ê –µ—â–µ –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∏–ª–∏ —Ä–µ—à–∏—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.
                
                –ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?
                - üõ†Ô∏è –ü–æ–º–æ—á—å —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
                - üé® –ü–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–µ—Ö–æ–ª.
                - üí¨ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É, –≥–¥–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∞–∫—Ü–∏–∏, –Ω–æ–≤–∏–Ω–∫–∏ –∏ –æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
                - üõí –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ü–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö.
                
                –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º! üòä""");
        message.setReplyMarkup(handler.createInlineKeyboard(
                List.of(
                        new Pair<>("üõ†Ô∏è –°–µ—Ä–≤–∏—Å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "service_support"),
                        new Pair<>("üé® –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–µ—Ö–æ–ª", "create_case"),
                        new Pair<>("üí¨ –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", "join_group"),
                        new Pair<>("üõí –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏", "promotions"),
                        new Pair<>("\uD83D\uDCBC –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", "cooperation")
                )
        ));
        currentClient.setStatus(ClientStatus.SAVED);
        clientService.saveClient(currentClient);

        return message;
    }

    Message executeMessage(SendMessage message) {
        try {
            return telegramBot.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø - ", e);
        }
        return null;
    }
    void executeMessage(SendMediaGroup message) {
        try {
            telegramBot.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ì–†–£–ü–ü–´ –ú–ï–î–ò–ê–§–ê–ô–õ–û–í - ", e);
        }
    }

    public void deleteLastMessage(Long chatId) {
        if(redisService.isMessageDeletable(chatId)){
            DeleteMessage deleteMessage = new DeleteMessage();
            deleteMessage.setChatId(chatId);
            deleteMessage.setMessageId(redisService.getLastMessageId(chatId));
            try {
                telegramBot.execute(deleteMessage);
            } catch (TelegramApiException e) {
               log.error(String.format("–£–î–ê–õ–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø %s –ù–ï –£–î–ê–õ–û–°–¨, –ü–û –ü–†–ò–ß–ò–ù–ï: %s", chatId, e.getMessage()));
            }
        }
    }

    public void registerBot(TechSupBot techSupBot) {
        this.telegramBot=techSupBot;
    }
}
